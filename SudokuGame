package sudokugame;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public final class SudokuGame implements SudokuInterface {
    
    private final int boardSize = 9;
    private final int groupSize = 9;
    private final int EMPTY_CELL = 0;
    private int currentStep = 1;
    int[][] game;

    public static void main(String[] args) {
        new SudokuGame();
    }
    
    public int[] getAllowedValuesInTheCurrentCell(int row, int col) {
        int[] allowedValuesInCurrentRow = getAllowedValuesInCurrentRow(row);
        int[] allowedValuesInCurrentCol = getAllowedValuesInCurrentCol(col);
        int[] allowedValuesInCurrentGroup = getAllowedValuesInCurrentGroup(row, col);
        int[] allowedValues = getAllowedValuesBasedOnTheThreeRules(allowedValuesInCurrentRow,
                allowedValuesInCurrentCol, allowedValuesInCurrentGroup);
        return allowedValues;
    }
    
    public int[] getAllowedValuesBasedOnTheThreeRules(int[] allowedValuesInCurrentRow,
            int[] allowedValuesInCurrentCol, int[] allowedValuesInCurrentGroup){
        int[] allowedValues = new int[9];
        int count = 0;
        for (int ii=0; ii<allowedValuesInCurrentRow.length; ii++) {
            int val1 = allowedValuesInCurrentRow[ii];
            for (int jj=0; jj<allowedValuesInCurrentCol.length; jj++) {
                int val2 = allowedValuesInCurrentCol[jj];
                if (val1==val2){
                    for (int kk=0; kk<allowedValuesInCurrentGroup.length; kk++) {
                        int val3 = allowedValuesInCurrentGroup[kk];
                        if (val2==val3) {
                            allowedValues[count]=val3;
                        }
                    }
                }
            }
            count ++;
        }
        return allowedValues;
    }
    
    public boolean isOnlyOneValueAllowedInTheCurrentCell(int row, int col){
        int[] allowedValues = getAllowedValuesInTheCurrentCell(row, col);
        int count = 0;
        for (int ii=0; ii<allowedValues.length; ii++){
            if (allowedValues[ii]>0){
                count++;
            }
        }
        return (count==1);
    }
    
}
