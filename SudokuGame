package sudokugame;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public final class SudokuGame implements SudokuInterface {
    
    private final int boardSize = 9;
    private final int groupSize = 9;
    private final int EMPTY_CELL = 0;
    private int currentStep = 1;
    int[][] game;

    public static void main(String[] args) {
        new SudokuGame();
    }
    
    public SudokuGame() {
        if (isOnlyOneValueAllowed(row, col)=true){
            int uniqueValue = getTheUniqueAllowedValue(row, col);
            updateGame(uniqueValue, row, col);
        }
    }
    
    /* Natasha's section
    */
    
    

public int[] getAllowedValuesInCurrentCol(int col) {
    int[] allowedValues = {1,2,3,4,5,6,7,8,9};
    int[] vals = new int[boardSize];
    
    int m = 0;
    int n = 0;
    for (int i = 0; i < game.length; i++) {
        for (int j = (col-1); j < game.length; j+=9) {
            vals[m++] = game[i][j];
            //System.out.print(game[i][j] + ", ");
        }
         
        
        if (vals[n] != 0) { 
          for (int k = 0; k < allowedValues.length; k++) {
              if (vals[n] == allowedValues[k]) {
                  allowedValues[k] = 0;
              }
                      
          }
      }  
      n++; 
    }
    
    for (int i = 0; i < vals.length; i++) {
        System.out.print(vals[i] + ", ");
    }
    System.out.println();
    
    for (int i = 0; i < allowedValues.length; i++) {
        System.out.print(allowedValues[i] + ", ");
    }
    
    return allowedValues;
}



public int[] getAllowedValuesInCurrentRow(int row) {
    int[] allowedValues = {1,2,3,4,5,6,7,8,9};
    int[] vals = new int[boardSize];
    
    int m = 0;
    int n = 0;
    for (int i = (row-1); i < game.length; i+=9) {
        for (int j = 0; j < game.length; j++) {
            vals[m++] = game[i][j];
            //System.out.print(game[i][j] + ", ");
        }
         
        
        if (vals[n] != 0) { 
          for (int k = 0; k < allowedValues.length; k++) {
              if (vals[n] == allowedValues[k]) {
                  allowedValues[k] = 0;
              }
                      
          }
      }  
      n++; 
    }
    
    for (int i = 0; i < vals.length; i++) {
        System.out.print(vals[i] + ", ");
    }
    System.out.println();
    
    for (int i = 0; i < allowedValues.length; i++) {
        System.out.print(allowedValues[i] + ", ");
    }
    
    return allowedValues;
}


public int[] getAllowedValuesInCurrentGroup(int row, int col) {
    int[] allowedValues = {1,2,3,4,5,6,7,8,9};
    int[] vals = new int[boardSize];
    int newRow = 0;
    int newCol = 0;
    
    if (row == 1) 
        newRow = 0;
    if (row == 2) 
        newRow = 3;
    if (row == 3) 
        newRow = 6;
    if (col == 1) 
        newCol = 0;
    if (col == 2) 
        newCol = 3;
    if (col == 3) 
        newCol = 6;
    
    System.out.println("row: " + newRow + "\ncol: " + newCol);
    
    
    int m = 0;
    int n = 0;
    for (int i = newRow; i < (newRow+3); i++) {
        for (int j = newCol; j < (newCol+3); j++) {
            vals[m++] = game[i][j];
            
            //System.out.print(game[i][j] + ", ");
        
        
        
        if (vals[n] != 0) { 
          for (int k = 0; k < allowedValues.length; k++) {
              if (vals[n] == allowedValues[k]) {
                  allowedValues[k] = 0;
              }
                      
          }
      }  
      n++; 
    }
    }
    for (int i = 0; i < vals.length; i++) {
        System.out.print(vals[i] + ", ");
    }
    System.out.println();
    
    for (int i = 0; i < allowedValues.length; i++) {
        System.out.print(allowedValues[i] + ", ");
    }
    
    return allowedValues;
        
}



public boolean isCellEmpty(int row, int col) {
    row--;
    col--;
    if (game[row][col] == 0){
//        System.out.println(puzzle[(row*9)+col]);
        return true;
    }
    else {
//        System.out.println(puzzle[(row*9)+col]);
        return false;
    }
    
}

    
    
    
/* New part 
*/
    
    public int[] getAllowedValuesInTheCurrentCell(int row, int col) {
        int[] allowedValuesInCurrentRow = getAllowedValuesInCurrentRow(row);
        int[] allowedValuesInCurrentCol = getAllowedValuesInCurrentCol(col);
        int[] allowedValuesInCurrentGroup = getAllowedValuesInCurrentGroup(row, col);
        int[] allowedValues = getAllowedValuesBasedOnTheThreeRules(allowedValuesInCurrentRow,
                allowedValuesInCurrentCol, allowedValuesInCurrentGroup);
        return allowedValues;
    }
    
    public int[] getAllowedValuesBasedOnTheThreeRules(int[] allowedValuesInCurrentRow,
            int[] allowedValuesInCurrentCol, int[] allowedValuesInCurrentGroup){
        int[] allowedValues = new int[9];
        int count = 0;
        for (int ii=0; ii<allowedValuesInCurrentRow.length; ii++) {
            int val1 = allowedValuesInCurrentRow[ii];
            for (int jj=0; jj<allowedValuesInCurrentCol.length; jj++) {
                int val2 = allowedValuesInCurrentCol[jj];
                if (val1==val2){
                    for (int kk=0; kk<allowedValuesInCurrentGroup.length; kk++) {
                        int val3 = allowedValuesInCurrentGroup[kk];
                        if (val2==val3) {
                            allowedValues[count]=val3;
                        }
                    }
                }
            }
            count ++;
        }
        return allowedValues;
    }
    
    public boolean isOnlyOneValueAllowedInTheCurrentCell(int row, int col){
        int[] allowedValues = getAllowedValuesInTheCurrentCell(row, col);
        int count = 0;
        for (int ii=0; ii<allowedValues.length; ii++){
            if (allowedValues[ii]>0){
                count++;
            }
        }
        return (count==1);
    }
    
    public int getTheUniqueAllowedValue(int row, int col){
        int[] allowedValues = getAllowedValuesInTheCurrentCell(row, col);
        int uniqueValue = 0;
        for (int ii=0; ii<allowedValues.length; ii++){
            if (allowedValues[ii] != 0){
                uniqueValue = allowedValues[ii];
            }
        }
        return uniqueValue;
    }
    
}
